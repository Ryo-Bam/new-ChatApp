{"version":3,"sources":["reducks/users/actions.jsx","reducks/store/initialState.jsx","reducks/users/reducers.jsx","component/UIkit/primarybutton.jsx","component/UIkit/TextInput.jsx","firebase/config.jsx","firebase/index.jsx","reducks/store/store.jsx","templates/SignIn.jsx","reducks/users/operations.jsx","reducks/users/selectors.jsx","component/product/MessageField.jsx","component/product/MessageSubmitButton.jsx","component/product/gravatar.jsx","component/product/TextIn.jsx","component/product/MessageItem.jsx","component/product/MessageList.jsx","templates/Home.jsx","templates/SignUp.jsx","Auth.jsx","Router.jsx","component/Header/Header.jsx","component/Header/HeaderMenus.jsx","component/Header/ClosableCrawer.jsx","App.jsx","index.js"],"names":["SIGN_IN","signInAction","userState","type","payload","isSignedIn","role","uid","username","email","SIGN_OUT","initialState","users","UsersReducer","state","action","Actions","useStyles","makeStyles","backgroundColor","color","fontsize","height","marginBottom","width","PrimaryButton","props","classes","Button","className","button","variant","onClick","label","TextInput","TextField","fullWidth","margin","multiline","required","rows","value","onChange","process","firebaseConfig","apiKey","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","measurementId","REACT_APP_FIREBASE_MEASUREMENT_ID","firebase","initializeApp","history","auth","db","firestore","FirebaseTimestamp","storage","functions","Timestamp","messagesRef","database","ref","pushMessage","name","text","push","SignIn","dispatch","useDispatch","useState","setEmail","password","setPassword","inputEmail","useCallback","event","target","inputPassword","a","alert","signInWithEmailAndPassword","then","result","user","collection","doc","get","snapshot","data","signIn","usersSelector","getUserName","createSelector","getIsSignedIn","getEmail","Text","MessageField","inputEl","setText","isComposed","setIsComposed","selector","useSelector","autoFocus","inputRef","e","onKeyDown","key","preventDefault","onCompositionStart","onCompositionEnd","send","MessageSubmitButton","IconButton","disabled","current","focus","gravatarPath","lowerCaseString","trim","toLowerCase","digest","crypto","createHash","update","Form","display","justifyContent","gridRow","TextIn","useRef","avatarPath","Grid","container","item","xs","Avatar","src","inline","MessageItem","isLastItem","useEffect","scrollIntoView","behavior","ListItem","divider","ListItemAvatar","ListItemText","primary","secondary","Typography","component","root","overflow","MessageList","messages","setMessages","orderByKey","limitToLast","on","val","newMessages","Object","entries","map","entry","nameAndText","length","List","index","rot","gridTemplateRows","maxWidth","Home","SignUp","setUsername","confirmPassword","setConfirmPassword","inputUsername","inputConfirmPassword","confirmpassword","createUserWithEmailAndPassword","timestamp","now","userInitialData","created_at","updated_at","set","signUp","Auth","children","onAuthStateChanged","Error","customer_id","payment_method_id","Router","exact","path","theme","flexGrow","menuBar","toolBar","iconButtons","Header","open","setOpen","handleDrawerToggle","AppBar","position","Toolbar","onClose","Icon","HeaderMenus","drawer","breakpoints","up","flexShrink","toolbar","mixins","drawerPaper","searchField","alignItems","marginLeft","ClosableDrawer","keyword","setKeyWord","inputKeyWord","Drawer","anchor","paper","ModalProps","keepMounted","Divider","signOut","ListItemIcon","App","History","store","reduxCreateStore","combineReducers","router","connectRouter","applyMiddleware","routerMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9c557b3a.chunk.js","sourcesContent":["export const  SIGN_IN = \"SIGN_IN\";\nexport const signInAction = (userState) => {\n    return {\n        type: \"SIGN_IN\",\n        payload: {\n            isSignedIn: true,\n            role: userState.role,\n            uid: userState.uid,\n            username: userState.username,\n            email: userState.email\n        }\n    }\n};\n\nexport const SIGN_OUT = \"SIGN_OUT\";\nexport const signOutAction = () => {\n    return {\n        type: \"SIGN_OUT\",\n        payload: {\n            isSignedIn: false,\n            role: \"\",\n            uid: \"\",\n            username: \"\" \n        }\n    }\n\n}\n","const initialState = {\n    users: {\n        isSignedIn: false,\n        role: \"\",\n        uid: \"\",\n        username: \"\",\n    }\n}\n\nexport default initialState;","import * as Actions from './actions'\nimport initialState from '../store/initialState'\n\nexport const UsersReducer = (state = initialState.users, action) => {\n    switch (action.type) {\n        case Actions.SIGN_IN:\n            return {\n                ...state,\n                ...action.payload\n            }\n        case Actions.SIGN_OUT:\n            return {\n                ...action.payload\n            }\n        default:\n            return state\n    }\n}\n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles({\n    \"button\": {\n        backgroundColor: \"#1b54b5\",\n        color: \"#000\",\n        fontsize: 16,\n        height: 48,\n        marginBottom: 16,\n        width: 256\n    }\n})\n\nconst PrimaryButton = (props) => {\n    const classes = useStyles();\n    return (\n        <Button className={classes.button} variant=\"contained\" onClick={() => props.onClick()}>\n          {props.label}\n        </Button>\n    )\n}\n\nexport default PrimaryButton","import React from 'react'\nimport TextField from '@material-ui/core/TextField'\n\nconst TextInput = (props) => {\n    return (\n        <TextField\n            fullWidth={props.fullWidth}\n            label={props.label}\n            margin=\"dense\"\n            multiline={props.multiline}\n            required={props.required}\n            rows={props.rows}\n            value={props.value}\n            type={props.type}\n            onChange={props.onChange}\n        />\n    )\n}\n\nexport default TextInput","import 'firebase/auth'\n\nconst {\n  REACT_APP_FIREBASE_API_KEY,\n  REACT_APP_FIREBASE_AUTH_DOMAIN,\n  REACT_APP_FIREBASE_PROJECT_ID,\n  REACT_APP_FIREBASE_STORAGE_BUCKET,\n  REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  REACT_APP_FIREBASE_APP_ID,\n  REACT_APP_FIREBASE_MEASUREMENT_ID\n} = process.env;\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nexport const firebaseConfig = {\n    apiKey: REACT_APP_FIREBASE_API_KEY,\n    authDomain: REACT_APP_FIREBASE_AUTH_DOMAIN,\n    projectId: REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n    appId: REACT_APP_FIREBASE_APP_ID,\n    measurementId: REACT_APP_FIREBASE_MEASUREMENT_ID\n  };","import firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/firestore'\nimport 'firebase/storage'\nimport 'firebase/functions'\nimport {firebaseConfig} from \"./config\";\nimport 'firebase/database'\n\nfirebase.initializeApp(firebaseConfig)\nexport const auth = firebase.auth();\nexport const db = firebase.firestore();\nexport const storage = firebase.storage();\nexport const functions = firebase.functions();\nexport const FirebaseTimestamp = firebase.firestore.Timestamp;\n\n\nconst database = firebase.database();\nexport const messagesRef = database.ref('messages');\n\nexport const pushMessage = ({ name, text }) => {\n  messagesRef.push({ name, text });\n};\n\n","import {\n    createStore as reduxCreateStore,\n    combineReducers,\n    applyMiddleware\n} from \"redux\";\nimport thunk from \"redux-thunk\"\nimport {UsersReducer} from \"../users/reducers\"\nimport {connectRouter, routerMiddleware} from \"connected-react-router\"\n\nexport const createStore = (history) => {\n    return reduxCreateStore(\n        combineReducers({\n            router: connectRouter(history),\n            users: UsersReducer\n        }),\n        applyMiddleware(\n            routerMiddleware(history),\n            thunk\n        )\n    )\n}\n// import {\n//     createStore as reduxCreateStore,\n//     combineReducers,\n//     applyMiddleware\n// } from \"redux\";\n\n// import {connectRouter, routerMiddleware} from \"connected-react-router\";\n// import thunk from 'redux-thunk';\n// import { UsersReducer } from \"../users/reducers\";\n// import { createLogger } from \"redux-logger\";\n\n\n// export default function createStore(history) {\n\n//     const middleWares = [routerMiddleware(history),thunk]\n//     if (process.env.NODE_ENV === 'development') {\n//         const logger = createLogger({\n//             collapsed: true,\n//             diff: true\n//         })\n//         middleWares.push(logger)\n//     }\n//     return reduxCreateStore(\n//         combineReducers({\n//             router: connectRouter(history),\n//             users: UsersReducer\n//         }),\n//         applyMiddleware(...middleWares)\n//     )\n// }","import React,{useState,useCallback} from 'react';\nimport { useDispatch } from 'react-redux';\nimport {TextInput, PrimaryButton} from '../component/UIkit/index'\nimport {push} from 'connected-react-router'\nimport { signIn } from '../reducks/users/operations';\n\nconst SignIn = () => {\n    const dispatch = useDispatch();\n\n    const [email,setEmail] = useState(\"\"),\n          [password,setPassword] = useState(\"\");\n\n    const inputEmail = useCallback((event) => {\n        setEmail(event.target.value)\n    }, [setEmail]);\n\n    const inputPassword = useCallback((event) => {\n        setPassword(event.target.value)\n    }, [setPassword]);\n\n    return (\n        <div className=\"c-section-container\">\n            <h2 className=\"u-text__headline u-text-center\">サインイン</h2>\n            <div className=\"module-spacer--medium\" />\n            <TextInput \n                fullWidth={true} label={\"メールアドレス\"} multiline={false} required={true}\n                rows={1} value={email} type={\"email\"} onChange={inputEmail}\n            />\n            <TextInput \n                fullWidth={true} label={\"パスワード\"} multiline={false} required={true}\n                rows={1} value={password} type={\"password\"} onChange={inputPassword}\n            />\n            <div className=\"module-spacer--medium\" />\n            <div className=\"center\">\n                <PrimaryButton \n                    label={\"Sign In\"}\n                    onClick={() => dispatch(signIn(email, password))}\n                />\n                <div className=\"module-spacer--medium\" />\n                <p onClick={() => dispatch(push('./signup'))}>アカウントをお持ちでない方はこちら</p>\n            </div>\n        </div>\n    )\n}\n\nexport default SignIn;","import {signInAction, signOutAction} from \"./actions\";\nimport {push} from \"connected-react-router\";\nimport { auth, db, FirebaseTimestamp } from \"../../firebase/index\";\n\nexport const signIn = (email, password) => {\n    return async (dispatch) => {\n        //validation\n        if (email === \"\" || password === \"\") {\n            alert(\"必須項目が未入力です\")\n            return false\n        }\n\n        auth.signInWithEmailAndPassword(email, password)\n            .then(result => {\n                const user = result.user\n                \n                if (user) {\n                    const uid = user.uid\n\n                    db.collection('users').doc(uid).get()\n                        .then(snapshot => {\n                            const data = snapshot.data()\n\n                            dispatch(signInAction({\n                                isSignedIn: true,\n                                role: data.role,\n                                uid: uid,\n                                username: data.username,\n                                email: data.email\n                            }))\n                            dispatch(push(\"/\"))\n                        })\n                }\n            })\n    }\n    \n}\n\nexport const signUp = (username, email, password, confirmpassword) => {\n    return async (dispatch) => {\n        //validation\n        if (username === \"\" || email === \"\" || password === \"\" || confirmpassword === \"\") {\n            alert(\"必須項目が未入力です\")\n            return false\n        }\n\n        if (password !== confirmpassword) {\n            alert(\"パスワードが一致しません。もう一度お試しください。\")\n            return false\n        }\n\n        return auth.createUserWithEmailAndPassword(email, password)\n            .then(result => {\n                const user = result.user\n\n                if (user) {\n                    const uid = user.uid\n                    const timestamp = FirebaseTimestamp.now()\n\n                    const userInitialData = {\n                        created_at: timestamp,\n                        email: email,\n                        role: \"customer\",\n                        uid: uid,\n                        updated_at: timestamp,\n                        username: username\n\n                    }\n                    db.collection('users').doc(uid).set(userInitialData)\n                        .then(() => {\n                            dispatch(push(\"/\"))\n                        })\n                }\n\n            })\n    }\n}\n\nexport const signOut = () => {\n    return async (dispatch) => {\n        auth.signOut()\n            .then(() => {\n                dispatch(signOutAction());\n                dispatch(push('./signin'))\n            })\n    }\n}\n\nexport const listenAuthState = () => {\n    return async (dispatch) => {\n        return auth.onAuthStateChanged(user => {\n            if (user) {\n                db.collection('users').doc(user.uid).get()\n                    .then(snapshot => {\n                        const data = snapshot.data()\n                        if (!data) {\n                            throw new Error('ユーザーデータが存在しません。')\n                        }\n\n                        // Update logged in user state\n                        dispatch(signInAction({\n                            customer_id: (data.customer_id) ? data.customer_id : \"\",\n                            email: data.email,\n                            isSignedIn: true,\n                            payment_method_id: (data.payment_method_id) ? data.payment_method_id : \"\",\n                            role: data.role,\n                            uid: user.uid,\n                            username: data.username,\n                        }))\n                    })\n            } else {\n                dispatch(push('/signin'))\n            }\n        })\n    }\n};\n\n","import {createSelector} from 'reselect'\n\nconst usersSelector = (state) => state.users;\n\nexport const getUserId = createSelector(\n    [usersSelector],\n    state => state.uid\n)\nexport const getUserName = createSelector(\n    [usersSelector],\n    state => state.username\n)\nexport const getIsSignedIn = createSelector(\n    [usersSelector],\n    state => state.isSignedIn\n)\nexport const getEmail = createSelector(\n    [usersSelector],\n    state => state.email\n)","import React,{useState} from 'react'\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core';\nimport {pushMessage} from '../../firebase/index';\nimport { useSelector } from 'react-redux';\nimport { getUserName } from '../../reducks/users/selectors';\n\nconst useStyles = makeStyles({\n    Text: {\n        width: \"100%\"\n    },\n})\n\nconst MessageField = ({ inputEl,setText, text}) => {\n    const [isComposed, setIsComposed] = useState(false) \n    const classes = useStyles();\n    const selector = useSelector(state => state);\n    const username = getUserName(selector)\n\n    return (                   \n        <TextField\n        className={classes.Text}\n        autoFocus\n        inputRef={inputEl}\n        onChange={(e) => setText(e.target.value)}\n        onKeyDown={(e) => {\n          if (isComposed) return;\n  \n          const text = e.target.value;\n          if (text === '') \n          return;\n          \n          if (e.key === 'Enter') {\n            pushMessage({ name:{username}, text });\n            setText('');\n            e.preventDefault();\n          }\n        }}\n        onCompositionStart={() => setIsComposed(true)}\n        onCompositionEnd={() => setIsComposed(false)}\n        value={text}\n        />\n    )\n}\nexport default MessageField;","import React from 'react';\nimport {IconButton} from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\nimport { useSelector } from 'react-redux';\nimport { getUserName } from '../../reducks/users/selectors';\nimport {pushMessage} from '../../firebase/index'\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles({\n    send: {\n        color: \"#1b54b5\"\n    }\n})\n\nconst MessageSubmitButton = ({inputEl, setText, text}) => {\n    const classes = useStyles();\n    const selector = useSelector(state => state);\n    const username = getUserName(selector)\n    return (\n        <IconButton disabled={text === ''} onClick={() => {\n            pushMessage({name:{username}, text})\n            setText('')\n            inputEl.current.focus();\n        }}\n        >\n            <SendIcon className={classes.send}/>\n        </IconButton>\n    )\n}\n\nexport default MessageSubmitButton","import crypto from 'crypto';\n\nexport const gravatarPath = ({email}) => {\n    const lowerCaseString = email.trim().toLowerCase();\n    const md5 = crypto.createHash('md5');\n    const digest = md5.update(lowerCaseString, 'binary').digest('hex');\n    return `https://www.gravatar.com/avatar/${digest}/?d=mp`;\n};","import React,{useRef,useState} from 'react';\nimport {makeStyles} from '@material-ui/styles';\nimport Button from '@material-ui/core/Button';\nimport { Avatar, Grid } from '@material-ui/core';\nimport MessageField from './MessageField';\nimport MessageSubmitButton from './MessageSubmitButton';\nimport {gravatarPath} from './gravatar';\nimport {getEmail} from \"../../reducks/users/selectors\";\nimport {useSelector} from 'react-redux';\n\n\n\nconst useStyles = makeStyles({\n    Form: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        width: \"95%\",\n        margin: \"26px\",\n        gridRow: 2\n    },\n})\n\nexport const TextIn = ({name}) => {\n    const inputEl = useRef(null)\n    const [text, setText] = useState('');\n    const classes = useStyles();\n    const selector = useSelector(state => state);\n    const email = getEmail(selector)\n    const avatarPath = gravatarPath({email})\n\n    return (\n        <>\n            <form className={classes.Form}>\n            <Grid container>\n                <Grid item xs={1}>\n                    <Avatar src={avatarPath}/>\n                </Grid>\n                <Grid item xs={10}>\n                    <MessageField inputEl={inputEl} name={name} setText={setText} text={text} />\n\n                </Grid>\n                <Grid item xs={1}>\n                    <Button variant=\"containd\" color=\"primary\">\n                        <MessageSubmitButton inputEl={inputEl} name={name} setText={setText} text={text}/>\n                    </Button>\n                </Grid>\n            </Grid>        \n            </form>\n        </>\n    )\n}\n","import React, { useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport { getEmail } from '../../reducks/users/selectors';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/styles';\nimport {gravatarPath} from './gravatar';\n\nconst useStyles = makeStyles({\n    inline: {\n        display: 'inline'\n    }\n})\n\nconst MessageItem = ({isLastItem, text, name}) => {\n    const ref = useRef(null)\n    const classes = useStyles()\n    const selector = useSelector(state => state);\n    const email = getEmail(selector)\n    const avatarPath = gravatarPath({email})\n\n\n    useEffect(() => {\n        if (isLastItem) {\n            ref.current.scrollIntoView({behavior: 'smooth'})\n        }\n    },[isLastItem])\n\n    return (\n        <ListItem divider={true} ref={ref}>\n        <ListItemAvatar>\n          <Avatar src={avatarPath} />\n        </ListItemAvatar>\n        <ListItemText\n          primary={name}\n          secondary={\n              <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={classes.inline}\n                color=\"textPrimary\"\n              >\n                {text}\n              </Typography>\n          }\n        />\n      </ListItem>\n        \n\n    )\n}\n\nexport default MessageItem;","import React, { useEffect, useState } from 'react';\nimport { List } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {messagesRef} from '../../firebase/index';\nimport MessageItem from './MessageItem'\n\nconst useStyles = makeStyles({\n    root: {\n      gridRow: 1,\n      overflow: 'auto',\n      width: '100%'\n    }\n  })\n\nconst MessageList = () => {\n    const [messages, setMessages] = useState([]);\n    const classes = useStyles()\n\n    useEffect(() => {\n        messagesRef.orderByKey().limitToLast(30).on('value', (snapshot) => {\n            const messages = snapshot.val();\n            if (messages === null) return;\n            const entries = Object.entries(messages);\n            const newMessages = entries.map(entry => {\n                const [key, nameAndText] = entry;\n                return {key, ...nameAndText};\n            })\n            setMessages(newMessages)\n        })\n    }, []);\n\n\n    const length = messages.length;\n\n    return <List className={classes.root}>\n               {messages.map(({key, name, text}, index) => {\n                    const isLastItem = length === index + 1;\n                       return <MessageItem key={key} name={name.username} text={text} isLastItem={isLastItem}/>\n                   })}\n           </List>\n    \n}\n\n\nexport default MessageList;","import React from 'react'\n// import {signOut} from '../reducks/users/operations'\nimport {TextIn} from '../component/product/TextIn'\nimport {makeStyles} from '@material-ui/core/styles'\nimport MessageList from '../component/product/MessageList'\n\nconst useStyles = makeStyles({\n    rot: {\n        display: 'grid',\n        height: '86vh',\n        gridTemplateRows: '1fr auto',\n        maxWidth: 1024,\n        margin: '0 auto'\n    }\n})\n\n\nconst Home = () => {\n    const classes = useStyles()\n    // const dispatch = useDispatch()\n    // const selector = useSelector(state => state)\n    // const uid = getUserId(selector)\n    // const username = getUserName(selector)\n    return (\n        <div className={classes.rot}>\n            <MessageList/>\n            <TextIn />\n        </div>\n    )\n}\n\nexport default Home;\n","import React,{useState,useCallback} from 'react';\nimport { useDispatch } from 'react-redux';\nimport {TextInput, PrimaryButton} from '../component/UIkit/index'\nimport {push} from 'connected-react-router'\nimport { signUp } from '../reducks/users/operations';\n\nconst SignUp =() => {\n    const dispatch = useDispatch()\n\n   const [username,setUsername] = useState(\"\"),\n         [email,setEmail] = useState(\"\"),\n         [password,setPassword] = useState(\"\"),\n         [confirmPassword,setConfirmPassword] = useState(\"\");\n\n   const inputUsername = useCallback((event) => {\n       setUsername(event.target.value)\n   }, [setUsername]);\n\n   const inputEmail = useCallback((event) => {\n       setEmail(event.target.value)\n   }, [setEmail]);\n\n   const inputPassword = useCallback((event) => {\n       setPassword(event.target.value)\n   }, [setPassword]);\n\n   const inputConfirmPassword = useCallback((event) => {\n       setConfirmPassword(event.target.value)\n   }, [setConfirmPassword]);\n\n\n   return (\n       <div className=\"c-section-container\">\n           <h2 className=\"u-text__handline u-text-center\">アカウント登録</h2>\n           <div className=\"module-spacer--medium\" />\n           <TextInput \n               fullWidth={true} label={\"ユーザー名\"} multiline={false} required={true}\n               rows={1} value={username} type={\"text\"} onChange={inputUsername}\n           />\n           <TextInput \n               fullWidth={true} label={\"メールアドレス\"} multiline={false} required={true}\n               rows={1} value={email} type={\"email\"} onChange={inputEmail}\n           />\n           <TextInput \n               fullWidth={true} label={\"パスワード\"} multiline={false} required={true}\n               rows={1} value={password} type={\"password\"} onChange={inputPassword}\n           />\n           <TextInput \n               fullWidth={true} label={\"パスワード（再確認）\"} multiline={false} required={true}\n               rows={1} value={confirmPassword} type={\"password\"} onChange={inputConfirmPassword}\n           />\n           <div className=\"module-spacer--medium\" />\n           <div className=\"center\">\n               <PrimaryButton \n                   label={\"アカウントを登録する\"}\n                   onClick={() => dispatch(signUp(username, email, password, confirmPassword))}\n               />\n               <div className=\"module-spacer--medium\" />\n               <p onClick={() => dispatch(push('./signin'))}>アカウントをお持ちの方はこちら</p>\n           </div>\n       </div>\n   )\n}\n\nexport default SignUp","import React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getIsSignedIn} from \"./reducks/users/selectors\";\nimport {listenAuthState} from \"./reducks/users/operations\";\n\nconst Auth = ({children}) => {\n    const dispatch = useDispatch();\n    const selector = useSelector((state) => state);\n\n    const isSignedIn = getIsSignedIn(selector)\n\n    useEffect(() => {\n        if (!isSignedIn) {\n            dispatch(listenAuthState())\n        }\n    }, []);//eslint-disable-line\n\n    if (!isSignedIn) {\n        return <></>\n    } else {\n        return children\n    }\n};\n\nexport default Auth;","import React from 'react'\nimport { Switch, Route} from 'react-router-dom'\nimport {Home, SignIn, SignUp} from './templates'\nimport Auth from './Auth';\n\nconst Router = () => {\n    return (\n\n            <Switch>\n                <Route exact path={\"/signup\"} component={SignUp} />\n                <Route exact path={\"/signin\"} component={SignIn} />\n                <Auth>\n                    <Route exact path={\"(/)?\"} component={Home} />\n                </Auth>\n            </Switch>\n  \n    )\n}\n\nexport default Router\n","import React,{useCallback, useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getIsSignedIn } from '../../reducks/users/selectors';\nimport {push} from 'connected-react-router';\nimport {HeaderMenus,ClosableDrawer} from './index';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuBar: {\n      backgroundColor: \"#1b54b5\",\n      color: \"#fff\"\n  },\n  toolBar: {\n      margin: '0 auto',\n      maxWidth: 1024,\n      width: '100%'\n  },\n  iconButtons: {\n      margin: '0 0 0 auto'\n  },\n}));\n\nconst Header = () => {\n    const classes = useStyles();\n    const selector = useSelector((state) => state);\n    const dispatch = useDispatch();\n    const isSignedIn = getIsSignedIn(selector)\n\n    const [open, setOpen] = useState(false)\n    const handleDrawerToggle = useCallback((event) => {\n        if (event.type === 'keydown' && (event.key === 'tab' || event.key === 'Shift')) {\n            return;\n        }\n        setOpen(!open)\n    },[setOpen, open])\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"fixed\" className={classes.menuBar}>\n                <Toolbar className={classes.toolBar}>\n                    <p onClick={() => dispatch(push('/'))}>\n                        ２回目だじょ\n                    </p>\n                    {isSignedIn && (\n                        <div className={classes.iconButtons}>\n                            <HeaderMenus handleDrawerToggle={handleDrawerToggle}/>\n                        </div>\n                    )}\n                </Toolbar>\n            </AppBar>\n            <ClosableDrawer open={open} onClose={handleDrawerToggle} />\n        </div>\n    )\n    \n}\n\nexport default Header;","import React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n    Icon:{\n        color: '#fff'\n    }\n})\nconst HeaderMenus = (props) => {\n    const classes = useStyles();\n    return (\n        <>\n            <IconButton onClick={(event) => props.handleDrawerToggle(event)}>\n                <MenuIcon className={classes.Icon}/>\n            </IconButton>\n        </>\n    )\n\n}\n\nexport default HeaderMenus","import React,{useCallback,useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport {TextInput} from '../UIkit/index'; \nimport {push} from 'connected-react-router';\nimport { useDispatch } from 'react-redux';\nimport {signOut} from '../../reducks/users/operations';\n\nconst useStyles = makeStyles((theme) => ({\n    drawer: {\n        [theme.breakpoints.up('sm')]:{\n            flexShrink: 0,\n            width: 256\n        }\n    },\n    toolbar: theme.mixins.toolbar,\n    drawerPaper: {\n        width: 256\n    },\n    searchField: {\n        alignItems: 'center',\n        display: 'flex',\n        marginLeft: 32\n    }\n}))\n\n\nconst ClosableDrawer = (props) => {\n    const dispatch = useDispatch()\n    const classes = useStyles();\n    const {container} = props;\n\n    const [keyword, setKeyWord] = useState(\"\");\n\n    const inputKeyWord = useCallback((event) => {\n        setKeyWord(event.target.value)\n    },[setKeyWord])\n\n\n\n    return (\n        <nav className={classes.drawer}>\n            <Drawer \n                container={container}\n                variant=\"temporary\"\n                anchor=\"right\"\n                open={props.open}\n                onClose={(e) => props.onClose(e)}\n                classes={{paper: classes.drawer}}\n                ModalProps={{keepMounted: true}}\n            >\n                <div className={classes.searchField}>\n                    <TextInput \n                        fullWidth={false} label={\"キーワードを入力\"} multiline={false}\n                        onChange={inputKeyWord} required={false} rows={1} value={keyword} type={\"text\"}\n                    />\n                </div>\n                <Divider />\n                <List>\n                    <ListItem button key=\"logout\" onClick={() => dispatch(signOut())}>\n                        <ListItemIcon>\n                            <ExitToAppIcon />\n                        </ListItemIcon>\n                        <ListItemText primary={\"Logout\"} />\n                    </ListItem>\n                </List>\n            </Drawer>      \n        </nav>\n    )\n}\n\nexport default ClosableDrawer;","import React from 'react'\nimport Router from './Router'\nimport './assets/css/style.css'\nimport {Header} from \"./component/Header/index\"\n\nconst App = () => {\n\n    return (\n      <>\n        <Header />\n        <main className=\"c-main\">\n          <Router />\n        </main>\n      </>\n    )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport  {Provider} from 'react-redux';\nimport {createStore} from './reducks/store/store';\nimport App from './App';\nimport {ConnectedRouter} from 'connected-react-router';\nimport * as History from 'history';\n\nconst history = History.createBrowserHistory();\nexport const store = createStore(history);\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <App />\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}